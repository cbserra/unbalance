# Changes

Version 5.6.4 - 2021-04-21

- Implement go linting (golangci)
- Fix port issue
- Fix ownership, permissions and paths (Unraid compliance)

Version 5.6.3 - 2019-10-26

- Switch to yarn
- Remove vscode settings

Version 5.6.1 - 2019-10-26

- Add missing isNumber function
- Support 6.8.x
- Bump github.com/mattn/go-colorable from 0.1.2 to 0.1.4 in /server
- Bump github.com/mattn/go-isatty from 0.0.9 to 0.0.10 in /server

Version 5.6.0 - 2019-09-07

- Add elapsed time to transfer screen
- Fix unbalance logo container bg color
- Add contrast to drop down in history screen
- Decrease binary size
- Adjust debug endpoints
- Fix npm issues
- Fix fontawesome url resolution issues
- Compress server output
- Modify UI version format
- Add workspace
- Edit copy
- Run npm audit fix
- Complete name changes
- Add notice about exclusive access in the UI
- Bump github.com/dgrijalva/jwt-go in /server
- Bump github.com/mattn/go-colorable from 0.0.9 to 0.1.2 in /server
- Bump github.com/stretchr/testify from 1.1.4 to 1.3.0 in /server
- Bump github.com/gorilla/websocket from 1.2.0 to 1.4.0 in /server
- Bump github.com/davecgh/go-spew from 1.1.0 to 1.1.1 in /server
- Bump github.com/labstack/echo in /server
- Bump github.com/stretchr/testify from 1.3.0 to 1.4.0 in /server
- Bump github.com/mattn/go-isatty from 0.0.8 to 0.0.9 in /server
- Bump github.com/gorilla/websocket from 1.4.0 to 1.4.1 in /server
- Fix npm audit issues
- Fix npm audit issues

Version 5.5.0 - 2019-02-12

- Implement Go Modules
- Allow ReservedAmount/ReservedUnit to be saved to disk
- Add error 13 as flagged command
- fixup
- Fix client reported findings
- Fix golintci issues

Version 5.4.0 - 2018-09-18

- Remove client/dist folder
- Create app folder

Version 5.3.0 - 2018-09-18

- Modify logic to determine listening protocol
- Implement parcel-bundler
- Remove $GOPATH from stack trace
- Fix protocol handling
- Change unraid logo
- Round seconds to prevent precision issues

Version 5.2.1 - 2018-06-05

- Fix planning stage's calculation of space
- Fix wrong command icon in history screen

Version 5.2.0 - 2018-05-12

- Fix ssl cert detection
- Allow customization of UI refresh rate

Version 5.1.1 - 2018-05-11

- Fix planner issues
- Add debug logging

Version 5.1.0 - 2018-05-09

- Fix ssl handling
- Implement block-based space planning
- Use SI's digital units
- Improve logging
- Remove height constraint
- Implement stop operation feature
- Fix command in progress icon
- Improve logging

Version 5.0.0 - 2018-02-27

- Future proof date based version
- Enable https support
- Fix ssl handling
- Fix floating footer issue
- Implement /proc based rsync handling
- Implement history file conversion routine
- Improve handling of rsync error 23
- Set new default rsync flags
- Fix variable usage in template
- Update docs
- Use date-based version

Version 4.0.2 - 2018-01-12

- Revert date base plugin version

Version 4.0.1 - 2018-01-11

- Remove presence check
- Add test data
- Replace go websocket with gorilla websocket
- Improve error logging
- Fix plugin install script
- Add date based plugin version

Version 4.0.0 - 2017-12-05

- Fix space calculation logic
- Migrate gom to dep
- Create new domain package
- Create new array service
- Make initial adjustments to core and server services
- Make adjustments to client code
- Create template for new services
- Reorganize client actions
- Use new state layout
- Prettier formatting
- Make modifications in helper libs
- Improve Operation struct semantics
- Improve backend (server) semantics
- Initial refactoring scatter calculation (server)
- Initial refactoring scatter calculation (client)
- Reorganize status constants
- Add script to create test environment on test server
- Rename actions/api calls
- Remove unneeded code
- Change meaning of command fields
- Initial implementation of transfer logic
- Enable dryRun toggle
- Change function declaration style
- Add Transfer screen
- Implement progress status for transfer operation
- Fold Progress struct into Operation
- Wording changes for legibility
- Refactor code for readability
- Initial implementation of operation history serializer
- Fix active link for Transfer screen
- Fix Gather screen ui issues
- Change active command icon
- Fix clearConsole logic
- Implement gather calculate (findTargets) logic
- Update test environment script
- Improve display of selected items in Gather screen
- Small tweak to calculate logic
- Remove deprecated code
- Reorganize code
- Implement Gather move
- Register additional endpoints
- Fix log feature
- Improve visuals of Transfer screen
- Add shortid package
- Modify package version
- Change location on scatterMove
- Initial implementation of History feature
- Add datetime management package
- Improve handling of history data
- Improve UI of History components
- Code cleanup
- Refactor calculate concept to plan concept
- Implement getOperation endpoint
- Fix gather transfer setup
- Modify history management logic
- Fix flipOperation issue
- Add missing gatherMove actions
- Reset state upon transfer
- Remove old code
- Remove unneeded state elements
- Remove unneeded style
- Restore actions
- Use current state when doing a reset
- Fixes to make gather work
- Fix issues with elapsed calculation
- Restore clear console action
- Use a better row key
- Remove unneeded code
- Improve Transfer screen UI
- Remove logging
- Change setting name
- Make rsync default default flags immutable
- Fix undefined variable issue
- Fix issue decoding save history
- Fix minor text issue
- Add ID field to Command struct
- Fix go lint issues
- Fix tests
- Clean up code
- Avoid running stop script if not present
- Refactor code for readibility/performance
- Throttle command outuput based on elapsed time
- Improve complexity of commandCompleted method
- Improve operation logging
- Code improvements
- Keep separate console lines per operation
- Reimplement validate operation (client)
- Reimplement validate operation (server)
- Reimplement validate operation (server)
- Implement replay operation
- Fixes after replay/validate testing
- Code improvement
- Fix processes for failed operations
- Fix issues with gather operation
- Fix checking a destination disk (scatter)
- Fix logic to disable Plan button
- Refresh unraid at appropriate times
- Fix logic to (un)check targets when one is chosen
- Change support fund text with an icon
- Implement (un)check all To disk (scatter)
- Replace calc/findTargets strings with plan
- Rename notifyCalc/notifyMove
- Rename missing elements
- Upgrade client packages
- Add react-modal package
- Make user confirm replay/validate operations
- Move constants to common package
- Fix issue with refreshing page/restarting browser
- Adjust CI scripts to new context
- Add /fonts endpoint
- Add uglifyjs step
- Remove lato font
- Minor adjustments
- Add version to history
- Reset plan parameters before running a plan
- Fix issue with empty rsync args settings
- Enable replay/validate only when it's safe
- Update documentation
- Relocate scatter validate invocation
- Use vscode instead of atom

Version 3.3.3 - 2017-09-12

- Remove parent folder if empty
- Replace yarn with npm5
- Remove logging
- Update client packages
- Update server packages
- Update postcss
- Hide echo banner
- Use prune exec rm form
- Add explicit websocket dependency

Version 3.3.2 - 2017-08-20

- Fix BytesToTransfer amount on Gather op
- Fix syntax
- Implement checkForUpdate feature

Version 3.3.1 - 2017-08-18

- Add logging
- Add bitcoin

Version 3.3.0 - 2017-08-14

- Add required package
- Fix handler invocation
- Implement react-router v4
- Implement locate api endpoint
- Create first working version
- Get storage todo upon entering each route
- Set a proper name for the dto
- Use proper dto name
- Use alternative implementation for humanBytes
- Implement Find Target logic
- Sort target disks by least amount of data transfer
- Fix typo
- Create separate constant module
- Create action to get user shares
- Remove unneeded code
- Inject history object into the state
- Implement Gather navigation Wizard
- Refresh storage data before getting targets
- Refactor nav buttons into separate components
- Implement target selection
- Show dry run toggle
- Show dry-run always
- Implement gather move operation
- Fix copy
- Create header for the gather choose screen
- Fix console panel scrolling
- Modify text
- Show source disk first
- Provide summary of commands to be executed
- Improve UI for Move step
- Get disk folders only if sourcedisk is present
- Optimize Settings component
- Modify some UI styling
- Implement Multi-Op resume
- Remove duplicated message
- Standardize messages
- Improve perms issue logging
- Add rsync error logging
- Fix text
- Allow verbosity setting to control perms issues logging
- Prepare for 3.3.0

Version 3.2.0 - 2017-07-07

- Complete VALIDATE op implementation
- Donâ€™t duplicate warning message

Version 3.1.2 - 2017-07-06

- Add folder deletion safeguard

Version 3.1.1 - 2017-07-01

- Adjust for changes in dry-run

Version 3.1.0 - 2017-06-30

- Migrate to the update app structure
- Fix timing issue
- Improve logging
- Fix conf location
- Add log verbosity setting

Version 3.0.0 - 2017-06-28

- Prevent spurious rsync lines in logs
- Upgrade actor related packages
- Remove deprecated package
- Implement new actor/service architecture
- Upgrade packages
- Implement new labstack/echo api
- Add/Update eslint-standard packages
- Set up rules
- Lint code with standard
- Upgrade packages
- Add missing package
- Lint code
- Add scatter/gather
- Implement operation state
- Adjustments to client code
- Use system fonts
- Throttle websocket updates
- Fix issue with chosen folders
- Improve hostname detection
- Fix issue with unescaped entities
- Allow struct data to be modified
- Rename option
- Update README
- General preparations
- Update docs
- Update docs

Version 2.1.0 - 2017-02-03

- Implement real time rsync move progress
- Modify shell output scanning
- Install lint packages
- Lint actions
- Lint components
- Lint lib
- Lint project
- Fix wording
- Remove api calls no longer required

Version 2.0.1 - 2017-01-13

- Modify instructions based on new UX
- Modify README based on new UX (fixes)

Version 2.0.0 - 2017-01-13

- Accept special characters in changelog text
- Add react-tree-menu
- Initial tree-view implementation
- Use css styling
- Remove call to getTree
- Implement tree collapse handling
- Get tree for initial source disk
- Adjust home screen to new logic
- Change shape of tree sub-tree
- Create function to check if folder is empty
- Change node structure
- Modify getTree logic
- Implement treeChecked functionality
- Display chosen folders
- Align chosen folders to the top
- Implement new checked logic
- Cache retrievals
- Modify visual cues
- Move selection pane when source disk changes
- Modify button disabling logic
- Use chosen folders for calculate operation
- Allow top-level files to be moved
- Modify logging messages
- Remove folders in settings logic
- Optimizations

Version 1.8.9 - 2016-12-22

- Fix release

Version 1.8.8 - 2016-12-22

- Print a warning when readdir fails

Version 1.8.7 - 2016-12-11

- Fix empty plg file

Version 1.8.6 - 2016-12-11

- Account for setuid, setgid and/or sticky bit

Version 1.8.5 - 2016-12-09

- Fix notifyMove setting
- Fix logic that checks for file permissions

Version 1.8.4 - 2016-12-01

- Make sure IP is non-empty

Version 1.8.3 - 2016-11-25

- Keep separate config files
- Use unbalance.conf if available

Version 1.8.2 - 2016-11-24

- Rename references to unbalance.cfg
- Perform a better string comparison
- Uppercase port flag
- Add missing flags

Version 1.8.1 - 2016-11-24

- Fix rel-push-unbalance script
- Create correct config file (unbalance.conf)
- Fix UI not opening from settings page
- Check for config file presence
- Wording changes

Version 1.8.0 - 2016-11-11

- Add messages when permission issues arise Related to #11
- Fix syntax style Related to #11
- Restrict when to send the perm issues message If bytestomove == 0, no action will take place anyway, so there's no point in sending the perm issue msg Also check that we actually have issues Related to #11
- Display the warning when perm issues are found Related to #11
- Ignore binaries
- Fix errors Related to #11
- Use alternate method to get uid/gid Turns out os.User is based on cgo, so it can't be cross-compiled and is currently missing from linux/amd64 Roll out your own Related to #11
- Increase feedback timeout To be able to read it and process it Related to #11
- Increase the timeout Related to #11
- Improve begin/end messages Related to #11
- Improve email text Related to #11
- Support hal
- Fix deployment instructions These are deployment to the 'test' environment
- Add timeout state There may be occasions when two message arrive in sequence (calcFinished, calcPermission). What was happening is that the timeout set by last event wasn't being honored. By having a timeout state, the last event wins: it grabs the timeout state, if there's any it clears it and sets it's own. Related to #11
- First pass at logic to decide whether we need to issue a warning We still need to make sure it works against the new permissions script Related to #11
- Fix logic to detect issues Logic checks for Folders rwxrwxrwx Files rw-rw-rw- or r--r--r--
- Remove some disks entries Looks like rc2 is polluting the disks space, so we remove those disks that appear as DISK_NP
- Fix script to run as per user selection instead of always nobody
- Anchor dependencies to an exact version
- Initial CI script
- Remove master requirement
- Integrate unbalance.xml into this repo
- Add fastlane tool
- Add git-env script to setup git environment
- Add less dependencies
- Update client libraries
- Update server libraries
- Modify CI steps
- Check for client or server completion before creating release
- Create script to drive build process
- Improve git and fastlane scripts
- Modify logic to create changelogs
- Keep a separate repo for xml/plg
- Improve readability of CI steps
- Initial code reorganization
- Organize client code
- Organize server code
- Organize scripts
- Organize metadata
- Fix testing issues
- Implement Show Log feature (client)
- Implement Show Log feature (server)
- Let server name be configurable
- UI Adjustments
- Fixes to bump-hook script
- Fix CI script

Version 1.7.1 - 2016-07-09
    back: Decode rsync errors
    We now translate rsync error exit status into their corresponding textual meaning
    This fixes #13
    back: Change logic to check permissions
    Related to #11
    app: Bump version

Version 1.7.0 - 2016-06-09
    app: Update README to reflect latest changes
    app: Bump version

Version 1.6.0 - 2016-06-09
    front: Set updated default rsync flags
    back: Update the rsync flags to new default ("-avRX --partial"), if currently set to the old default ("-avX --partial")
    back: If the rsync flags include -R, then set src to relative and dst to just the root path. Otherwise, set both to full absolute paths.
    app: Set tests for new features
    app: Test for default flags
    app: Bump version

Version 1.5.3 - 2016-06-08
    back: Fix working directory argument position
    back: Double check anyway, set the working dir only if specified in the argument
    app: Bump version

Version 1.5.2 - 2016-06-08
    back: Allow api endpoint folder (location where var.ini, disks.ini, etc reside) to be specified as settings. This helps with testing.
    back: Set a workdir for shell commands, if needed.
    back: Read api endpoint location from params
    back: Change default rsync arguments to -avRX, so that rsync will always create all folders on the destination
    back: Due to the previous change, we set the workdir to the source disk when running the rsync process
    app: Add tests for the latest changes
    app: Bump Version

Version 1.5.1 - 2016-05-26
    back: Add trailing slash to destination in rsync cmd
    app: Bump version

Version 1.5.0 - 2016-05-21
    app: Implement custom rsync flags functionality
    back: FIx issue with data not being logged due to fmt.printx statements rather than mlog.info
    app: Handle better edge case where source share is empty or does not exist
    - Bump version

Version 1.4.0 - 2016-03-03
    - Restore diskmv to the original script, but we shouldn't be using it anymore (keep the nofuser version)
    - Add ShellEx function, that accepts separate command and arguments. This gives me direct access to the output of the given command.
    - Move from diskmv to straight rsync
    Release 1.4.0

Version 1.3.7 - 2016-03-03
    - Show only the main cache disk
    Release 1.3.7

Version 1.3.6 - 2016-03-02
    - Upgrade mlog (with lowered maxSize logs)
    - Remove fuser calls since it's generating cannot stat warning that ultimately affect operations. This also removes the size, empty and symlinkclauses. The main reason for these changes is that unbalance should be run as the only data modifying app on the unraid server when it's moving files. Any other scenario, will certainly have unpredictable results. I will eventually discuss with trinapicot/Freddie
    - Add license as per <https://github.com/trinapicot/unraid-diskmv/blob/master/LICENSE>
    - Redirect stderr to a logging function providing by the calling party
    - Add support for cache pools, both in client and server code.
    - Add some logging and error display
    - Perform stat on found file only (remove stat for main folder)
    - Add column to display the filesystem of the disk
    Release 1.3.6

Version 1.3.5 - 2016-02-27
    back: Remove unavailable field
    back: Add disk type
    back: Read unraid info from var.ini and disks.ini
    back: Add ini library
    back: Add additional check when processing du bs "folder"
    Release 1.3.5

Version 1.3.4 - 2016-02-18
    front: Show progress stats as received from the server
    back: Test progress stats functionality
    back: Calculate progress stats when moving files. Granularity is at the folder level, so stats jump in big chunks.
    Release 1.3.4

Version 1.3.3 - 2016-02-18
    front: Fix syntax (checking array length)
    Release 1.3.3

Version 1.3.2 - 2016-02-18
    front: Fix syntax error
    back: Send progress message when a new folder is found
    Release 1.3.2

Version 1.3.1 - 2016-02-17
    back: Change opInProgress to opState, so we know what operation is in progress (0=idle, 1=calc, 2=move)
    front: Move route definition to prevent warning messages
    front: Set ui according to data retrieved from the server
    front: Use ip address rather than hostname, to prevent issue with connecting to the server
    Release 1.3.1

Version 1.3.0 - 2016-01-17
    (front) Add ui and logic for setResevedAmount/setReservedUnit
    (back) Add boilerplate for setReservedAmount/setReservedUnit
    (back) Calculate reserved space based on user selections
    (back) Adjust testing
    (front) Fix wrong concat call
    (front) Set a timeout on the feedback panel, after which clean the lines to remove it from screen
    (front) Fix call to manually remove feedback panel
    (front) Dispatch an action to set feedback rather than setting it directly
    (front) Move reservedAmount and reservedSpace to state in the settings component, so that the user can play around with them freely. When apply is clicked, integrity checks are made and if they pass a single api call is made to set both values.
    (back) Leave knapsack unmodified from how it was at the beginning of time. Let calculate the buffer space beforehand and send this parameter, rather than the hard limit of before.
    (back) Calculate reserved space (buffer) before calling knapsack algorithm
    (back) Handle a single message to set reservedamount and reservedunit instead of 2 as before
    (back) Add tests
    (back) Add test dependency
    (unbalance) Make the plugin disabled by default
    (front) Adjust message
    (unbalance) Fix app name
    (front) Improve check for a subfolder
    (unbalance) Add use cases and icon credit
    Release 1.3.0

Version 1.2.15 - 2016-01-12
    - Update dependencies
    - Fixes for dev env
    Release 1.2.15

Version 1.2.14 - 2016-01-09
    (unbalance) Update instructions to run the app
    (unbalance) Fix visual layout of instructions
    (unbalance) Add newlines
    Release 1.2.14

Version 1.2.13 - 2016-01-09
    (unbalance) Remove page that is no longer needed
    (unbalance) Install cfg file with default settings
    (unbalance) Add some logging when installing and removing
    (plugin) Fix menu entry
    (plugin) Add link to open Web UI
    (plugin) Fix comparison (it was comparing string/string instead of int/int)
    (plugin) Fix icon size
    (plugin) Fix app path
    Release 1.2.13

Version 1.2.12 - 2016-01-09
    - Add settings page and menu page
    - Implement new logic for starting/stopping the app
    - Amend  template to use new stop logic and default config
    (back) Enable port to be an argument
    (unbalance) Put image in required location
    - Update build logic
    Release 1.2.12

Version 1.2.11 - 2016-01-08
    (unbalance) Ignore archive folder
    (front) Add new dependencies and setup webpack
    (unbalance) Fix credits
    (front) Rewrite front end to use latest reactorx version
    Release 1.2.11

Version 1.2.10 - 2016-01-04
    (back) Don't send notifications if the user said so
    (unbalance) Kill unbalance process when installing/updating
    (unbalance) Update version

Version 1.2.9 - 2016-01-04
    (unbalance) Fix version (from prev commit)
    (unbalance) Update version

Version 1.2.8 - 2016-01-04
    (unbalance) Fix instruction to run unbalance

Version 1.2.7 - 2016-01-04
    (back) Fix diskmv path and invocation
    (unbalance) Update version

Version 1.2.6 - 2016-01-04
    (back) Remove dead code
    (unbalance) Update version

Version 1.2.5 - 2016-01-04
    (unbalance) Add build steps to the bundler script, both client and server
    (unbalance) Update version

Version 1.2.4 - 2016-01-04
    (unbalance) Update version
    (unbalance) Update version

Version 1.2.3 - 2016-01-04
    (unbalance) Fix copy (closes #8)
    (unbalance) Add plg url and improve legibility of install steps (closes #6, closes #7)
    (unbalance) Apply correct case to unbalance app name
    (unbalance) Update version

Version 1.2.2 - 2016-01-04
    (unbalance) Fix plugin url, update version and rename app (lowercase it)
    (unbalance) Update version
    (unbalance) Fix copy

Version 1.2.1 - 2016-01-04
    (unbalance) Fix cp instruction
    (unbalance) Fix tar instruction
    (unbalance) Fix md5 substitution string
    (unbalance) Prepare for public version
    (unbalance) Update version

Version 1.2.0 - 2016-01-04
    (unbalance) Update README
    (unbalance) Add new screenshots
    (unbalance) Update settings screenshot
    (unbalance) Fix copy
    (unbalance) Ignore additional files
    (unbalance) Create support files for an unraid plugin
    (back) Look for diskmv script in the app's plugin folder
    (back) Look for web files in the app's plugin folder
    (back) Set a default logging location in the settings struct
    (unbalance) Remove previous version screenshot
    (unbalance) Do nothing when building bundle, if the file exists already
    (unbalance) Additional fixes for bundle script
    (unbalance) Change execute bit of plugin event scripts
    (unbalance) Add files required for unraid plugins
    (back) Small fixes
    (front) Logic adjustments
    (front) Change bootstrap logic, we now use the start action, to pull config, storage and tree values from the server
    (unbalance) Fixes #2 (migration to plugins), #3 (previous commit), #5 (tgz based on plugin distribution channel)
    (front) Fix cycle prevention logic
    (front) Add timeout for feedback panel (7 seconds)
    (front) Change styling of feedback panel
    (front) Fix #3
    (back) Change config location. We won't be migrating settings, since they're probably in /mnt/cache or /mnt/user/data, we can't guess all the places it can be. Closes #1.
    (unbalance) Replace screenshot of the home page
    (front) Scramble disk serial number for screenshot purposes
    (back) Remove artificial delay during calculate operation
    (unbalance) Upgrade package.json version

Version 1.1.0 - 2016-01-02
    (front) Add missing api parameter
    (front) Reset each disk when a calcuation has begun
    (front) Move control panel in home page to app header
    (front) Move alert panel to content area of app
    (front) General ui fixes
    (unbalance) Use latest version of diskmv (it's the same as for the previous unbalance version)
    (back) Sanitize path sento to diskmv for moving (remove leading slash, if any)
    (unbalance) Add support for notifications both in client and server
    (back) Use unRAID notifications as unBALANCE's notification system
    (unbalance) Allow other browser clients to connect to the server and receive the same interface as the original browser. It also works when the original browser does a refresh.
    (front) Disable calculate button as needed
    (front) Set correct label style for unraid status
    (front) Change footer color and copyright text
    (front) Style changes
    (front) Add check for unraid started status in settings
    (front) SImplify logic to check for unraid availability
    (back) Improve formatting of the operations' started, finished and elapsed times
    (front) Rename AlertPanel to FeedbackPanel
    (front) Set feedback message when calculate returns 0 bytes to move
    (front) Fix copy
    (front) UI improvements
    (front) Implement active state for navigation links
    (front) Little ui fix
    (front) Implement fill component to display how much a disk is filled
    (front) Disable dry run checkbox when an operation is running
    (front) Display a warning box instead of the settings, when an operation is running
    (back) Allow move operation to be parallelized
    (unbalance) Define a new opError message/action that raises an alert on the ui whenever it's received

Version 1.0.0 - 2015-12-31
    -Remove staging and art folders
    - First pass at new client architecture using redux
    (back) Ignore some additional files/folders
    (unbalance) Remove unneeded script
    (back) Add vendoring component (gom)
    (back) Bring makefile up to date
    (back) Rename components (or move them to another package)
    (back) Change apertoire.net for jbrodriguez (moved folder in my source code hierarchy)
    (back) Implement new settings logic
    (back) Implement echo as server (instead of gin)
    (back) Implement new actor/bus logic
    (back) Define new connection struct semantics
    (back) Fix legibility
    (back) Implement new websocket  handling logic
    (front) Reset client folder for a clean slate
    (front) Setup webpack based build system for the frontend, with dev server in node/express and hot module replacement, among other things.
    (front) Remove gulp task (no longer needed)
    (front) Define front end architecture to be react based. The framework is ad-hoc, with inputs from different sources
    (front) Add classnames to support css-modules syntax
    (unbalance) Start documenting the referenced code / apps / libraries
    (front) Define mounting element for app and remove css links that are no longer required
    (front) Replace styles with new flexbox grid
    (front) Mount app in new mount point
    (front) Apply new css-module syntax
    (unbalance) Add required node dependencies
    (front) Add image optimization and fingerprinting
    (front) Add images required in the app
    (front) Define production build configuration
    (front) First pass at new UI. The grid framework comes now from flexboxgrid.com
    (unbalance) Reflect change in grid framework
    (front) Document what the state/model should look like
    (front) Add progress feedback whenever there's an operation running
    (front) Fix className syntax
    (unbalance) Remove stats plugin for production builds
    (back) Fix echo handler function signature (it requires the function to return an error object)
    (front) Add proxy for dev purposes
    (front) Add json loader, since it is required by some dependencies
    (front) Add http proxy for api
    (front) Fix property reference
    (front) Get config upon loading page
    (front) Inject api into store
    (front) Cleanup code
    (back) Add file handling helper functions
    (back) Look for mdcmd in different locations. This in order to support pre 6.1 versions that had mdcmd at /root (6.1 moved it to /usr/local/sbin)
    (back) Perform a sanity check on core start, by trying to find mdcmd. If not found return an error (and fatal out)
    (back) Add opIsRunning flag. It's set when calculate/move are running and cleared when they're done
    (back) Change routes order in order for the first one to get picked up
    (back) Change message name for add folder functionality
    (back) Add echo logger middleware
    (back) Fatal out if sanity check fails during startup
    (back) Remove runningInDocker flag. All it did was to locate mdcmd, we now move it to the appropriate location when run under Docker. Also, diskmv will be put alongside unbalance binary, so that it will always be found there
    (back) Define config flag in code to pick up any settings saved by the user
    (back) Fix save settings logic. We now write to a tmp file and rename it when all writes are done
    (back) Add addFolder functionality
    (front) Define required constants
    (front) Add getstorage api call
    (front) General cleanups
    (front) First pass at table ui styling
    (front) Add addfolder functionality, still pending removal of folders and prevention of duplication
    (front) Add main ui, calling api, showing disks, logic for checking/unchecking disks, formatting functions
    (back) Fix unraid model's search for mdcmd logic errors
    (front) Proxy websockets
    (front) Switch to calling api.getconfig on boot and starting the app once the promise has been resolved. react-routers onEnter is a PITA to work with
    (front) Improve websocket handling in frontend code
    (front) Configure addFolder as a class method, rather than being embedded in the main function
    (front) Reroute to settings from home if no config is found. An alternative look into this issue can be found at <https://wmyers.github.io/technical/react-flux/Async-authentication-with-React-Router-1.0.0-beta2/>
    (front) Some ui improvements
    (back) Set up invocation of calculate (and move) operations
    (unbalance) Add target for deployment to makefile
    (front) Put img, css and js files into appropriate folders
    (front) Fix websocket proxying
    (front) Add visual clue for disks that would be changed after calculation is complete
    (back) Fix syntax for bool sprintf
    (back) Fix defer semantics
    (back) Add endpoint for app folder in server (it holds js and css files)
    (back) Remove socket service (no longer required)
    (back) Adjust bus buffer
    (back) Adjust server service to handle end-to-end ws connections
    (back) Return error from read for websocket connections
    (back) Change socket message receive type. We get exchange json messages.
    (back) server service code cleanup
    (back) Fix reception of json message
    (unbalance) Add target to deploy server binary to specified unraid host
    (back) Fix name of broadcast message
    (front) Implement UI for calculate as a progress line, but we'll change it next to introduce the web 'console'
    (back) Put 'operation finished' message as the last calc:progress message, then send a calc:end, with the new unraid object
    (front) Add console element as a separate component, in order to scroll to bottom (currently not working)
    (front) Fix label alternates in scss code
    (front) Enhance conditional classes logic
    (front) Reduce logic in ConsolePanel, make it as simple as possible, while enabling scrolling to the bottom at the same time
    (front) Reduce size of console.
    (front) Increase separation of concerns for the home component, by moving store manipulation logic to the store itself
    (front) Add move button enabling/disabling code (embedded in the state object)
    (front) Paint source disk with a different label color, after calculation is complete
    (unbalance) Include diskmv tool when deploying/publishing app
    (unbalance) Add toggleDryRun api
    (front) Add move feature
    (unbalance) Remove unneeded tool (old version)
    (front) Add path module for convenience
    (unbalance) Add getTree api call, to retrieve the folders underneat a given root. It's /mnt/user rooted at the server
    (front) Add TreeView component
    (front) Add styling to the TreeView
    (front) Add ajax call to retrieve sub folders in TreeView
    (unbalance) Add credits
    (front) Include add button ui to the treeview (first pass, will try to improve the css next)
    (front) Add fontawesome icons
    (front) Add config steps to process fontawesome icons
    (front) Remove items replaced by fontawesome
    (front) Use fontawesome icons
    (front) Fix logic to redirect to settings when no folders are defined
    (front) Add delete folder feature
    (front) Improve tree view ui
    (front) Add required modules
    (back) Implement delete folder functionality
    (front) Show a spinner when we're fetching folders from the server
    (front) Another attempt at tree view location
    (front) Improve folder input ui
    (front) Add alert panel (missing timeout implementation
    (front) Modify markup to cater for new flexbox production grid
    (front) Add missing state property
    (front) Remove files no longer needed
    (front) Rename module folder to components
    (front) Convert to ES5 notation to avoid errors
    (front) Define module dependencies
    (front) Redefine building steps for js files, using babel 6 logic
    (front) Define reactorx actions for the app. Each file roughly corresponds to a property of the state object.
    (front) Rewrite components to use reactorx framework
    (front) Use reactorx framework
    (back) Rename websocket messages passed between client and server
    (back) Add some progress messages
    (unbalance) Ignore .out files
    (unbalance) Remove folder that is no longer needed

Version 0.7.4 - 2015-08-18
    -Remove staging and art folders
    - Add support for unRAID 6.1 by mounting "/usr/local/sbin", since 6.1 changed the location of some binaries to this folder

Version 0.7.3 - 2015-06-02
    -Remove staging and art folders
    - Replace simple "du -bs" with a "find du -bs". This improves folder detection.
    - Add feature to show which folders will not be moved due to space restrictions
    - Add test cases for new feature
    - Copy latest diskmv to src folder

Version 0.7.2 - 2015-05-31
    -Remove staging and art folders
    - Upgrade Dockerfile to v0.7.1
    - Remove logrotate script, to prevent triggering email notifications (since logrotate fails on the container for some reason)

Version 0.7.1 - 2015-05-26
    -Remove staging and art folders
    - Update screenshot

Version 0.7.0 - 2015-05-26
    -Remove staging and art folders
    - Include number of unraid disks in logging
    - Fix logging bug (was referring to srcDisk instead of disk)
    - Fix regexp that scans the output of `du -bs <folder>`, to enable folders sizes of single digit
    - Adjust logging
    - Modify diskmv script to allow files in the root user share
    - Add credit (pubsub)
    - Add link to diskmv unRAID's forum thread
    - Add diskmv link in UI
    - Fix README.md to reflect current headroom
    - Enable functionality to let the user decide which disks are elegible as target for moving folders/files to.
    - Add test cases
    - Convert uint64 to int64, to handle adequately difference operations (and probable over/under flow)
    - Fix edge case in knapsack (one folders equals the size of the remaining space)
    - Fix service name in stop routine
    - Modify calculateBestFit to account for disks not chosen as target. If they're not elegible, then let newFree = Free, so that frontend logic detects no change in them
    - Update diskmv script
    - Update dev install script to reflect new version

Version 0.6.8 - 2015-05-17
    -Remove staging and art folders
    - Add screenshot to README.md
    - Add support for folders with spaces in the name
    - Add/Improve logging
    - Increase ReservedSpace to 450Mb and declare it as a constant

Version 0.6.7 - 2015-05-14
    -Remove staging and art folders
    - Fix test Dockerfile

Version 0.6.6 - 2015-05-14
    -Remove staging and art folders
    - Add notifications form validation
    - Fix calculate and move buttons disabled behaviour
    - Fix settings init function, by ensuring that the sane and current values are being used (and also saved to the config file)

Version 0.6.5 - 2015-05-14
    -Remove staging and art folders
    - Fix name of save button in notifications settings

Version 0.6.4 - 2015-05-14
    -Remove staging and art folders
    - Add new icon
    - Manage notification feature internally (do not depend on unRAID's notifications settings)
    - Remove mini dependency
    - Reorganize config structure, creating a settings structure that contains an embedded config structure
    - Set sane defaults for config options
    - Redefine shell commands in order to be able to send mail properly
    - Add logging for better debugging
    - Improve logging to better debug calculateBestFit function

Version 0.6.3 - 2015-05-09
    -Remove staging and art folders
    - Fix breadcrumb to unRAID notification settings

Version 0.6.2 - 2015-05-09
    -Remove staging and art folders
    - Add Notifications functionality, mails user when operation is completed (or any error occurr)
    - Fix main loop exit logic
    - Fix README.md copy
    - Add credits in README.md

Version 0.6.1 - 2015-05-07
    -Remove staging and art folders
    - Fix instructions in README.md to be independent of current version

Version 0.6.0 - 2015-05-07
    -Remove staging and art folders
    - Fix README.md copy
    - Fix html5mode = true, on the server
    - Add operation in progress support (to allow the url to be changed and still show console output)
    - Add better support for back end processes output
    - Fix websocket logic (when writing to the connected sockets)
    - Add ReconnectingWebSocket to the client
    - Remove FontAwesome

Version 0.5.1 - 2015-05-03
    -Remove staging and art folders
    - Fix Readme instructions and some typos.

Version 0.5.0 - 2015-05-03
    -Remove staging and art folders
    - Allow mdcmd location to be defined by an environment variable
    - Add signal handling as main loop of the application
    - Add StdErr to command output processing (previously only StdOut was considered)
    - Add separate flags to disable gui Calculate and Move controls
    - Fix bug with logdir logic
    - Add an environment variable to indicate that the app is running under a docker environment, and take action accordingly
    - Increase size of websocket buffers

Version 0.4.1 - 2015-05-02
    -Remove staging and art folders
    - Use environment variable to specify logfile path, but allow it to be overriden by the respective flag
    - Change usage wording

Version 0.4.0 - 2015-05-02
    -Remove staging and art folders
    - Add command line flags support, to specify config file and log file locations

Version 0.3.1 - 2015-05-02
    -Remove staging and art folders
    - Add README.md (unfinished)
    - Add remove folder functionality
    - Clean up logging in the front end
    - Remove unneeded code
    - Add info popup when there's nothing to be done
    - Add release task (creates a tar.gz of the app)
    - Fix instructions for unpacking the app
    - Add runsequence to perform cleanup before all other tasks
    - Fix first public version in README.md

Version 0.3.0 - 2015-05-02
    -Remove staging and art folders
    - Handle the fact that the array may not be started
    - Use the correct field to determine whether the array is started or not
    - Fix syntax issue in markup
    - Count all commits (instead of counting since the last tag)

Version 0.2.0 - 2015-05-01
    -Remove staging and art folders
    - Display app version in footer
    - Add Lime Technologies logo
    - Make links to open in a new tab
    - Move "console" above the dashboard
    - Refresh dashboard when the move operation has completed (via websocket)
    - Prevent duplication of entries when refreshing the dashboard

Version 0.1.1 - 2015-05-01
    -Remove staging and art folders
    - Add version string to binary

Version 0.1.0 - 2015-05-01
    initial commit
    completed work on refactoring the packer service provider. mapped it to a separate object with better functionality separation. will now work on refactor the concept itself, adding an option to let the code work against all disks. so i will iterate over disks in desc order of freespace, run a bestfit on it, pick the first solution, simulate a decrease of space on the disk, repeat, rinse
    not working commit, have to change everything to references instead of copy, doesnt work that way
    prototyped a removeFolder function based off stackoverflow, need to test against the real thing (currently mocking in osx)
    first working version, need to sort disks by free space (desc)
    preparing to replace ui
    static ui prototype
    ignore unbalance binary
    really ignore unbalance binary
    first steps for frontend ui, now will work on backed websocket server
    base websocket functionality in backend, so i will now merge both features and work on integration from here on
    * feature/ui:
      first steps for frontend ui, now will work on backed websocket server
    first stage of integration is completed, messages to the server are working, so now i'll work on a reply to the frontend, to close the integration feature
    communicatio between both parties is working, now need to complete proof of concept for gui, adding models and such to make angular actually render a dynamic ui
    first version with basic functionality going for it ... way to go !!
    + include only healthy disks in output (DISK_OK)
    + correct json tags for box object
    + rearrange ui columns and data (changing both html and js code)
    + added a replace filter (to remove '/mnt/' from output)
    showing which disks would be changed as part of the best fit scenario
    still work in progress and unstable, but will get to here today, will continue later
    had to move messages into lib, to prevent import cycle not allowed error , but i'm coming back with a vengeance to solve this once and for all
    it compiles, which is a good thing ! will work on finally getting that copying functionality home
    testing core move functionality, looks fine so far
    - Implemented a test to reserve some space, beyond which the knapsack algorithm shouldn't go
    - Cleaned up testing code
    - Defined the output of the move to be the commands that would be executed if the move actually took place (think of it as a dry run)
    yeah.
    we're starting from scratch
    - Created new app structure
    - Added calculation of best fit functionality
    - Added move functionality (shows the list of commands that would eventually be executed)
    - Added html5 localStorage functionality
    - Added foundation to implement a settings feature
    - Define new logic for getting folders
    - Upgrade angularjs and ui-router
    - Add controller semantics for selecting/deselecting to/from disks
    - Complete first functional draft
    - Create first iteration of redesigned interface
    - Add gulpjs (still partially)
    - Create new logo
    - Create new overall theme
    - Add new UI. It breaks the build, because I haven't implemented the angularjs hooks yet.
    - Create first functional version (still need to check settings page)
    - Create first working version of new UI. Still missing a part of the settings page
    - Add "submit" on enter
    - Fix state name on main logo anchor
    - Fix error when the elegible folders didnt exist in the source folder
    - Add gulp tasks to control full lifecycle
    - Add vendor injections
    - Fingerprint images (the same as the other assets)
    - Reorganize folder structure to support all assets fingerprinting
    - Add rsync task to send distribution folder to server
    - Create first functional version, only missing diskmv functionality.
    - Modify visual cue for when a disk will be changed, to a label (same as the "started" text)
    - Add diskmv to the dist folder
    - Reuse shell library from simplenas project
    - Invoke diskmv, but only log to console for now
    - Add websocket server functionality (untested)
    - Fix websocket functionality (duplex communication is working)
    - Add scroll to bottom directive (to simulate console)
    - Apply scope the data incoming from the websocket
    - Create logic to handle data incoming from the websocket
    - Add dryrun support
    - Add css spinner
    - Add folder to gitignore
    - Add LICENSE (MIT)
    - Add semver scripts to handle app versioning
